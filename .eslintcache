[{"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/reportWebVitals.ts":"1","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/App.tsx":"2","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/index.tsx":"3","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/gen/api/dist/index.js":"4","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/gen/api/dist/configuration.js":"5","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/gen/api/dist/api.js":"6","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/gen/api/dist/base.js":"7","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/Jobs/allJobs.tsx":"8","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/Home/Home.tsx":"9","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/JobCell/JobCell.tsx":"10","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/OutReachEditor.tsx":"11","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/OutReachEditorReducer.tsx":"12","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/HelperFunctions/TextEditorHelpers.ts":"13","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/Modal/Modal.tsx":"14","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/Header/Header.tsx":"15","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/Button/Button.tsx":"16","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/HeaderContainer/HeaderContainer.tsx":"17","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/BorderBox/BorderBox.tsx":"18"},{"size":425,"mtime":1608830423948,"results":"19","hashOfConfig":"20"},{"size":1097,"mtime":1611013636711,"results":"21","hashOfConfig":"20"},{"size":500,"mtime":1608830423947,"results":"22","hashOfConfig":"20"},{"size":1038,"mtime":1611077765033,"results":"23","hashOfConfig":"20"},{"size":1625,"mtime":1611077764330,"results":"24","hashOfConfig":"20"},{"size":143704,"mtime":1611077764755,"results":"25","hashOfConfig":"20"},{"size":2387,"mtime":1611077764352,"results":"26","hashOfConfig":"20"},{"size":670,"mtime":1611029650990,"results":"27","hashOfConfig":"20"},{"size":926,"mtime":1611004052048,"results":"28","hashOfConfig":"20"},{"size":949,"mtime":1610903082513,"results":"29","hashOfConfig":"20"},{"size":5885,"mtime":1611078750776,"results":"30","hashOfConfig":"20"},{"size":2268,"mtime":1611078747364,"results":"31","hashOfConfig":"20"},{"size":517,"mtime":1611009712812,"results":"32","hashOfConfig":"20"},{"size":1727,"mtime":1611004490548,"results":"33","hashOfConfig":"20"},{"size":662,"mtime":1611013221403,"results":"34","hashOfConfig":"20"},{"size":579,"mtime":1611012726064,"results":"35","hashOfConfig":"20"},{"size":514,"mtime":1611012328809,"results":"36","hashOfConfig":"20"},{"size":319,"mtime":1611016405948,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"bsynr7",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"55","usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58","usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"40"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/reportWebVitals.ts",[],["88","89"],"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/App.tsx",["90","91","92"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./components/pages/Home/Home\";\nimport { ApiApi, Candidate, Job, Client } from \"./util/gen/api/dist\";\nimport AllJobsPage from \"./components/pages/Jobs/allJobs\";\nimport OutReachEditorPage from \"./components/pages/OutReachEditor/OutReachEditor\";\n\nfunction App() {\n  const initialClient: Client = { name: \"\", jobs: [], id: 0 };\n  const [client, setClient] = useState(initialClient);\n  const apiService = new ApiApi(undefined, \"http://localhost:8000\");\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/alljobs/:id\">\n          <OutReachEditorPage apiService={apiService} />\n        </Route>\n        <Route path=\"/alljobs\">\n          <AllJobsPage apiService={apiService} />\n        </Route>\n        <Route path=\"/\">\n          <HomePage\n            client={client}\n            apiService={apiService}\n            setClient={setClient}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/index.tsx",[],"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/gen/api/dist/index.js",["93"],"\"use strict\";\n/* tslint:disable */\n/* eslint-disable */\n/**\n *\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./configuration\"), exports);\n",["94","95"],"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/gen/api/dist/configuration.js",["96"],"\"use strict\";\n/* tslint:disable */\n/* eslint-disable */\n/**\n *\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Configuration = void 0;\nvar Configuration = /** @class */ (function () {\n    function Configuration(param) {\n        if (param === void 0) { param = {}; }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    Configuration.prototype.isJsonMime = function (mime) {\n        var jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    };\n    return Configuration;\n}());\nexports.Configuration = Configuration;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/gen/api/dist/api.js",["97"],"\"use strict\";\n/* tslint:disable */\n/* eslint-disable */\n/**\n *\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiApi = exports.ApiApiFactory = exports.ApiApiFp = exports.ApiApiAxiosParamCreator = void 0;\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n * ApiApi - axios parameter creator\n * @export\n */\nexports.ApiApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         *\n         * @param {Candidate} candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesCreate: function (candidate, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'candidate' is not null or undefined\n                    if (candidate === null || candidate === undefined) {\n                        throw new base_1.RequiredError('candidate', 'Required parameter candidate was null or undefined when calling apiCandidatesCreate.');\n                    }\n                    localVarPath = \"/api/candidates/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof candidate !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(candidate !== undefined ? candidate : {})\n                        : (candidate || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesDestroy: function (id, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiCandidatesDestroy.');\n                    }\n                    localVarPath = \"/api/candidates/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesList: function (options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/api/candidates/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {PatchedCandidate} [patchedCandidate]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesPartialUpdate: function (id, patchedCandidate, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiCandidatesPartialUpdate.');\n                    }\n                    localVarPath = \"/api/candidates/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof patchedCandidate !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(patchedCandidate !== undefined ? patchedCandidate : {})\n                        : (patchedCandidate || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesRetrieve: function (id, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiCandidatesRetrieve.');\n                    }\n                    localVarPath = \"/api/candidates/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {Candidate} candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesUpdate: function (id, candidate, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiCandidatesUpdate.');\n                    }\n                    // verify required parameter 'candidate' is not null or undefined\n                    if (candidate === null || candidate === undefined) {\n                        throw new base_1.RequiredError('candidate', 'Required parameter candidate was null or undefined when calling apiCandidatesUpdate.');\n                    }\n                    localVarPath = \"/api/candidates/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof candidate !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(candidate !== undefined ? candidate : {})\n                        : (candidate || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {Client} client\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsCreate: function (client, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'client' is not null or undefined\n                    if (client === null || client === undefined) {\n                        throw new base_1.RequiredError('client', 'Required parameter client was null or undefined when calling apiClientsCreate.');\n                    }\n                    localVarPath = \"/api/clients/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof client !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(client !== undefined ? client : {})\n                        : (client || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsDestroy: function (id, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiClientsDestroy.');\n                    }\n                    localVarPath = \"/api/clients/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsList: function (options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/api/clients/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {PatchedClient} [patchedClient]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsPartialUpdate: function (id, patchedClient, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiClientsPartialUpdate.');\n                    }\n                    localVarPath = \"/api/clients/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof patchedClient !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(patchedClient !== undefined ? patchedClient : {})\n                        : (patchedClient || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsRetrieve: function (id, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiClientsRetrieve.');\n                    }\n                    localVarPath = \"/api/clients/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {Client} client\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsUpdate: function (id, client, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiClientsUpdate.');\n                    }\n                    // verify required parameter 'client' is not null or undefined\n                    if (client === null || client === undefined) {\n                        throw new base_1.RequiredError('client', 'Required parameter client was null or undefined when calling apiClientsUpdate.');\n                    }\n                    localVarPath = \"/api/clients/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof client !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(client !== undefined ? client : {})\n                        : (client || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {Job} job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsCreate: function (job, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'job' is not null or undefined\n                    if (job === null || job === undefined) {\n                        throw new base_1.RequiredError('job', 'Required parameter job was null or undefined when calling apiJobsCreate.');\n                    }\n                    localVarPath = \"/api/jobs/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof job !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(job !== undefined ? job : {})\n                        : (job || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsDestroy: function (id, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiJobsDestroy.');\n                    }\n                    localVarPath = \"/api/jobs/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsList: function (options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/api/jobs/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {PatchedJob} [patchedJob]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsPartialUpdate: function (id, patchedJob, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiJobsPartialUpdate.');\n                    }\n                    localVarPath = \"/api/jobs/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof patchedJob !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(patchedJob !== undefined ? patchedJob : {})\n                        : (patchedJob || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsRetrieve: function (id, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiJobsRetrieve.');\n                    }\n                    localVarPath = \"/api/jobs/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {Job} job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsUpdate: function (id, job, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiJobsUpdate.');\n                    }\n                    // verify required parameter 'job' is not null or undefined\n                    if (job === null || job === undefined) {\n                        throw new base_1.RequiredError('job', 'Required parameter job was null or undefined when calling apiJobsUpdate.');\n                    }\n                    localVarPath = \"/api/jobs/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof job !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(job !== undefined ? job : {})\n                        : (job || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json\n         * @param {'json' | 'yaml'} [format]\n         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSchemaRetrieve: function (format, lang, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/api/schema/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    if (format !== undefined) {\n                        localVarQueryParameter['format'] = format;\n                    }\n                    if (lang !== undefined) {\n                        localVarQueryParameter['lang'] = lang;\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {Todo} todo\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosCreate: function (todo, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'todo' is not null or undefined\n                    if (todo === null || todo === undefined) {\n                        throw new base_1.RequiredError('todo', 'Required parameter todo was null or undefined when calling apiTodosCreate.');\n                    }\n                    localVarPath = \"/api/todos/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof todo !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(todo !== undefined ? todo : {})\n                        : (todo || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosDestroy: function (id, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiTodosDestroy.');\n                    }\n                    localVarPath = \"/api/todos/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosList: function (options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/api/todos/\";\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {PatchedTodo} [patchedTodo]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosPartialUpdate: function (id, patchedTodo, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiTodosPartialUpdate.');\n                    }\n                    localVarPath = \"/api/todos/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof patchedTodo !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(patchedTodo !== undefined ? patchedTodo : {})\n                        : (patchedTodo || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosRetrieve: function (id, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiTodosRetrieve.');\n                    }\n                    localVarPath = \"/api/todos/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {Todo} todo\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosUpdate: function (id, todo, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'id' is not null or undefined\n                    if (id === null || id === undefined) {\n                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling apiTodosUpdate.');\n                    }\n                    // verify required parameter 'todo' is not null or undefined\n                    if (todo === null || todo === undefined) {\n                        throw new base_1.RequiredError('todo', 'Required parameter todo was null or undefined when calling apiTodosUpdate.');\n                    }\n                    localVarPath = \"/api/todos/{id}/\"\n                        .replace(\"{\" + \"id\" + \"}\", encodeURIComponent(String(id)));\n                    localVarUrlObj = new URL(localVarPath, 'https://example.com');\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basicAuth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    // authentication cookieAuth required\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    queryParameters = new URLSearchParams(localVarUrlObj.search);\n                    for (key in localVarQueryParameter) {\n                        queryParameters.set(key, localVarQueryParameter[key]);\n                    }\n                    for (key in options.query) {\n                        queryParameters.set(key, options.query[key]);\n                    }\n                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    nonString = typeof todo !== 'string';\n                    needsSerialization = nonString && configuration && configuration.isJsonMime\n                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])\n                        : nonString;\n                    localVarRequestOptions.data = needsSerialization\n                        ? JSON.stringify(todo !== undefined ? todo : {})\n                        : (todo || \"\");\n                    return [2 /*return*/, {\n                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\n/**\n * ApiApi - functional programming interface\n * @export\n */\nexports.ApiApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @param {Candidate} candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesCreate: function (candidate, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiCandidatesCreate(candidate, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesDestroy: function (id, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiCandidatesDestroy(id, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesList: function (options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiCandidatesList(options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {PatchedCandidate} [patchedCandidate]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesPartialUpdate: function (id, patchedCandidate, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiCandidatesPartialUpdate(id, patchedCandidate, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesRetrieve: function (id, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiCandidatesRetrieve(id, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {Candidate} candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesUpdate: function (id, candidate, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiCandidatesUpdate(id, candidate, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {Client} client\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsCreate: function (client, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiClientsCreate(client, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsDestroy: function (id, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiClientsDestroy(id, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsList: function (options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiClientsList(options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {PatchedClient} [patchedClient]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsPartialUpdate: function (id, patchedClient, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiClientsPartialUpdate(id, patchedClient, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsRetrieve: function (id, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiClientsRetrieve(id, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {Client} client\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsUpdate: function (id, client, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiClientsUpdate(id, client, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {Job} job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsCreate: function (job, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiJobsCreate(job, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsDestroy: function (id, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiJobsDestroy(id, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsList: function (options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiJobsList(options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {PatchedJob} [patchedJob]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsPartialUpdate: function (id, patchedJob, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiJobsPartialUpdate(id, patchedJob, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsRetrieve: function (id, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiJobsRetrieve(id, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {Job} job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsUpdate: function (id, job, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiJobsUpdate(id, job, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json\n         * @param {'json' | 'yaml'} [format]\n         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSchemaRetrieve: function (format, lang, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiSchemaRetrieve(format, lang, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {Todo} todo\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosCreate: function (todo, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiTodosCreate(todo, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosDestroy: function (id, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiTodosDestroy(id, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosList: function (options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiTodosList(options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {PatchedTodo} [patchedTodo]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosPartialUpdate: function (id, patchedTodo, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiTodosPartialUpdate(id, patchedTodo, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosRetrieve: function (id, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiTodosRetrieve(id, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {Todo} todo\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosUpdate: function (id, todo, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.ApiApiAxiosParamCreator(configuration).apiTodosUpdate(id, todo, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * ApiApi - factory interface\n * @export\n */\nexports.ApiApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @param {Candidate} candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesCreate: function (candidate, options) {\n            return exports.ApiApiFp(configuration).apiCandidatesCreate(candidate, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesDestroy: function (id, options) {\n            return exports.ApiApiFp(configuration).apiCandidatesDestroy(id, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesList: function (options) {\n            return exports.ApiApiFp(configuration).apiCandidatesList(options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {PatchedCandidate} [patchedCandidate]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesPartialUpdate: function (id, patchedCandidate, options) {\n            return exports.ApiApiFp(configuration).apiCandidatesPartialUpdate(id, patchedCandidate, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesRetrieve: function (id, options) {\n            return exports.ApiApiFp(configuration).apiCandidatesRetrieve(id, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this candidate.\n         * @param {Candidate} candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiCandidatesUpdate: function (id, candidate, options) {\n            return exports.ApiApiFp(configuration).apiCandidatesUpdate(id, candidate, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {Client} client\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsCreate: function (client, options) {\n            return exports.ApiApiFp(configuration).apiClientsCreate(client, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsDestroy: function (id, options) {\n            return exports.ApiApiFp(configuration).apiClientsDestroy(id, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsList: function (options) {\n            return exports.ApiApiFp(configuration).apiClientsList(options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {PatchedClient} [patchedClient]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsPartialUpdate: function (id, patchedClient, options) {\n            return exports.ApiApiFp(configuration).apiClientsPartialUpdate(id, patchedClient, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsRetrieve: function (id, options) {\n            return exports.ApiApiFp(configuration).apiClientsRetrieve(id, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this client.\n         * @param {Client} client\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientsUpdate: function (id, client, options) {\n            return exports.ApiApiFp(configuration).apiClientsUpdate(id, client, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {Job} job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsCreate: function (job, options) {\n            return exports.ApiApiFp(configuration).apiJobsCreate(job, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsDestroy: function (id, options) {\n            return exports.ApiApiFp(configuration).apiJobsDestroy(id, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsList: function (options) {\n            return exports.ApiApiFp(configuration).apiJobsList(options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {PatchedJob} [patchedJob]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsPartialUpdate: function (id, patchedJob, options) {\n            return exports.ApiApiFp(configuration).apiJobsPartialUpdate(id, patchedJob, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsRetrieve: function (id, options) {\n            return exports.ApiApiFp(configuration).apiJobsRetrieve(id, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this job.\n         * @param {Job} job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiJobsUpdate: function (id, job, options) {\n            return exports.ApiApiFp(configuration).apiJobsUpdate(id, job, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json\n         * @param {'json' | 'yaml'} [format]\n         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSchemaRetrieve: function (format, lang, options) {\n            return exports.ApiApiFp(configuration).apiSchemaRetrieve(format, lang, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {Todo} todo\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosCreate: function (todo, options) {\n            return exports.ApiApiFp(configuration).apiTodosCreate(todo, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosDestroy: function (id, options) {\n            return exports.ApiApiFp(configuration).apiTodosDestroy(id, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosList: function (options) {\n            return exports.ApiApiFp(configuration).apiTodosList(options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {PatchedTodo} [patchedTodo]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosPartialUpdate: function (id, patchedTodo, options) {\n            return exports.ApiApiFp(configuration).apiTodosPartialUpdate(id, patchedTodo, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosRetrieve: function (id, options) {\n            return exports.ApiApiFp(configuration).apiTodosRetrieve(id, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @param {number} id A unique integer value identifying this todo.\n         * @param {Todo} todo\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTodosUpdate: function (id, todo, options) {\n            return exports.ApiApiFp(configuration).apiTodosUpdate(id, todo, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * ApiApi - object-oriented interface\n * @export\n * @class ApiApi\n * @extends {BaseAPI}\n */\nvar ApiApi = /** @class */ (function (_super) {\n    __extends(ApiApi, _super);\n    function ApiApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @param {Candidate} candidate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiCandidatesCreate = function (candidate, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiCandidatesCreate(candidate, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this candidate.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiCandidatesDestroy = function (id, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiCandidatesDestroy(id, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiCandidatesList = function (options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiCandidatesList(options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this candidate.\n     * @param {PatchedCandidate} [patchedCandidate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiCandidatesPartialUpdate = function (id, patchedCandidate, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiCandidatesPartialUpdate(id, patchedCandidate, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this candidate.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiCandidatesRetrieve = function (id, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiCandidatesRetrieve(id, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this candidate.\n     * @param {Candidate} candidate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiCandidatesUpdate = function (id, candidate, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiCandidatesUpdate(id, candidate, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {Client} client\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiClientsCreate = function (client, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiClientsCreate(client, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this client.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiClientsDestroy = function (id, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiClientsDestroy(id, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiClientsList = function (options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiClientsList(options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this client.\n     * @param {PatchedClient} [patchedClient]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiClientsPartialUpdate = function (id, patchedClient, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiClientsPartialUpdate(id, patchedClient, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this client.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiClientsRetrieve = function (id, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiClientsRetrieve(id, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this client.\n     * @param {Client} client\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiClientsUpdate = function (id, client, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiClientsUpdate(id, client, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {Job} job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiJobsCreate = function (job, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiJobsCreate(job, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this job.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiJobsDestroy = function (id, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiJobsDestroy(id, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiJobsList = function (options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiJobsList(options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this job.\n     * @param {PatchedJob} [patchedJob]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiJobsPartialUpdate = function (id, patchedJob, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiJobsPartialUpdate(id, patchedJob, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this job.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiJobsRetrieve = function (id, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiJobsRetrieve(id, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this job.\n     * @param {Job} job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiJobsUpdate = function (id, job, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiJobsUpdate(id, job, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json\n     * @param {'json' | 'yaml'} [format]\n     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiSchemaRetrieve = function (format, lang, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiSchemaRetrieve(format, lang, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {Todo} todo\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiTodosCreate = function (todo, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiTodosCreate(todo, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this todo.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiTodosDestroy = function (id, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiTodosDestroy(id, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiTodosList = function (options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiTodosList(options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this todo.\n     * @param {PatchedTodo} [patchedTodo]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiTodosPartialUpdate = function (id, patchedTodo, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiTodosPartialUpdate(id, patchedTodo, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this todo.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiTodosRetrieve = function (id, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiTodosRetrieve(id, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @param {number} id A unique integer value identifying this todo.\n     * @param {Todo} todo\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    ApiApi.prototype.apiTodosUpdate = function (id, todo, options) {\n        var _this = this;\n        return exports.ApiApiFp(this.configuration).apiTodosUpdate(id, todo, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return ApiApi;\n}(base_1.BaseAPI));\nexports.ApiApi = ApiApi;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/gen/api/dist/base.js",["98"],"\"use strict\";\n/* tslint:disable */\n/* eslint-disable */\n/**\n *\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar axios_1 = require(\"axios\");\nexports.BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/Jobs/allJobs.tsx",["99"],"import React, { useEffect, useState } from \"react\";\nimport { ApiApi, Job } from \"../../../util/gen/api/dist\";\nimport JobCell from \"../../common/JobCell/JobCell\";\n\ntype AllJobsPageProps = {\n  setQueryInfo?: Function;\n  apiService?: ApiApi;\n};\n\nconst AllJobsPage: React.FC<AllJobsPageProps> = (props) => {\n  const { apiService } = props;\n  const [jobs, setJobs] = useState([{} as Job]);\n\n  useEffect(() => {\n    apiService?.apiJobsList().then((value) => {\n      const temp = value.data;\n      setJobs(temp);\n    });\n  }, []);\n\n  const jobcells = jobs?.map((job) => {\n    return <JobCell job={job} />;\n  });\n\n  return <div>{jobcells}</div>;\n};\n\nexport default AllJobsPage;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/Home/Home.tsx",["100","101","102","103","104"],"import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { ApiApi, Client } from \"../../../util/gen/api/dist\";\n// import { ApiApi, Client } from \"../../../../util/gen/api/dist\";\n\ntype HomePageProps = {\n  client: Client;\n  setClient: React.Dispatch<React.SetStateAction<Client>>;\n  setQueryInfo?: Function;\n  apiService?: ApiApi;\n};\n\nconst HomePage: React.FC<HomePageProps> = (props) => {\n  const { client, setClient, apiService } = props;\n  const login = () => {\n    debugger;\n    console.log(\"clicked\");\n    apiService?.apiClientsRetrieve(1).then((value) => {\n      debugger;\n      props.setClient(value.data);\n    });\n  };\n  return (\n    <div>\n      <div>\n        {client.name == \"\" && <button onClick={login}>Click to login</button>}\n      </div>\n      <div>\n        <Link to=\"/alljobs\">Go jobs Page</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/JobCell/JobCell.tsx",["105","106","107"],"import React, { CSSProperties, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ApiApi, Job } from \"../../../util/gen/api/dist\";\nimport \"./JobCell.css\";\n\ntype JobCellProps = {\n  job: Job;\n  apiService?: ApiApi;\n};\n\nconst myStyles: CSSProperties = {\n  position: \"absolute\",\n};\nconst JobCell: React.FC<JobCellProps> = (props) => {\n  const { job, apiService } = props;\n  debugger;\n  //   useEffect(() => {\n  //     debugger;\n  //     apiService?.apiJobsList().then((value) => {\n  //       const temp = value.data;\n  //       var temp2: Job = value.data[0];\n  //       debugger;\n  //       console.log(temp);\n  //     });\n  //   }, []);\n\n  return (\n    <Link to={\"/alljobs/\" + job.id} style={{ textDecoration: \"none\" }}>\n      <div className=\"userRoot\">\n        <div className=\"userAttributes\">\n          <div className=\"userAttribute\">{job.name}</div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default JobCell;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/OutReachEditor.tsx",["108","109","110","111","112","113","114","115","116","117","118"],"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/OutReachEditorReducer.tsx",["119","120","121","122"],"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/util/HelperFunctions/TextEditorHelpers.ts",[],"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/Modal/Modal.tsx",["123","124"],"import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { OutReachEditorActions } from \"../OutReachEditorReducer\";\n\ntype ModalProps = {\n  clickDraftHandler: () => void;\n  clickSavedHandler: () => void;\n  isOpen: boolean;\n};\n\nconst Modal: React.FC<ModalProps> = (props) => {\n  const { clickDraftHandler, clickSavedHandler, isOpen } = props;\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={false}\n        open={isOpen}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Use Google's location service?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Let Google help apps determine location. This means sending\n            anonymous location data to Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={clickDraftHandler} color=\"primary\">\n            Use Draft\n          </Button>\n          <Button onClick={clickSavedHandler} color=\"primary\" autoFocus>\n            Use Saved\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Modal;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/Header/Header.tsx",["125","126","127","128"],"import React, { useState } from \"react\";\nimport \"./Header.css\";\n\ntype HeaderProps = {\n  image_source?: string;\n  className?: string;\n};\nconst Header: React.FC<HeaderProps> = (props) => {\n  const { children, image_source } = props;\n  const headerClassName = \"header_root \" + props.className ?? \"\";\n  return (\n    <div className={headerClassName}>\n      <div style={{ paddingTop: \"40px\", marginLeft: \"20px\" }}>\n        <img\n          src={\n            \"https://uploads-ssl.webflow.com/5cbe0c945e636f107c79b29e/5d40e717eee5234153ff2570_dover-logo-script-aqua.svg\"\n          }\n          width={130}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/Button/Button.tsx",["129","130","131","132","133"],"import React, { CSSProperties, useEffect } from \"react\";\nimport \"./Button.css\";\nimport { Link } from \"react-router-dom\";\nimport { ApiApi, Job } from \"../../../util/gen/api/dist\";\n\ntype ButtonProps = {\n  className?: string;\n} & React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nconst Button: React.FC<ButtonProps> = (props) => {\n  return (\n    <div className={props.className ?? \"button_root\"}>\n      <button className={\"button_class\"} {...props}>\n        {props.children}\n      </button>\n    </div>\n  );\n};\n\nexport default Button;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/HeaderContainer/HeaderContainer.tsx",["134","135","136","137"],"import React, { CSSProperties, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ApiApi, Job } from \"../../../util/gen/api/dist\";\nimport \"./HeaderContainer.css\";\n\ntype HeaderContainerProps = {\n  apiService?: ApiApi;\n  className?: string;\n};\n\nconst HeaderContainer: React.FC<HeaderContainerProps> = (props) => {\n  const headerClassName = \"headerContainerRoot \" + props.className ?? \"\";\n\n  return <div className={headerClassName}>{props.children}</div>;\n};\n\nexport default HeaderContainer;\n","/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/common/BorderBox/BorderBox.tsx",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":26},{"ruleId":"142","severity":1,"message":"146","line":5,"column":18,"nodeType":"144","messageId":"145","endLine":5,"endColumn":27},{"ruleId":"142","severity":1,"message":"147","line":5,"column":29,"nodeType":"144","messageId":"145","endLine":5,"endColumn":32},{"ruleId":"148","severity":1,"message":"149","line":1,"column":1,"nodeType":"150","messageId":"151","endLine":1,"endColumn":14,"fix":"152"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"148","severity":1,"message":"149","line":1,"column":1,"nodeType":"150","messageId":"151","endLine":1,"endColumn":14,"fix":"153"},{"ruleId":"148","severity":1,"message":"149","line":1,"column":1,"nodeType":"150","messageId":"151","endLine":1,"endColumn":14,"fix":"154"},{"ruleId":"148","severity":1,"message":"149","line":1,"column":1,"nodeType":"150","messageId":"151","endLine":1,"endColumn":14,"fix":"155"},{"ruleId":"156","severity":1,"message":"157","line":19,"column":6,"nodeType":"158","endLine":19,"endColumn":8,"suggestions":"159"},{"ruleId":"142","severity":1,"message":"160","line":2,"column":27,"nodeType":"144","messageId":"145","endLine":2,"endColumn":33},{"ruleId":"142","severity":1,"message":"161","line":2,"column":35,"nodeType":"144","messageId":"145","endLine":2,"endColumn":41},{"ruleId":"142","severity":1,"message":"162","line":2,"column":43,"nodeType":"144","messageId":"145","endLine":2,"endColumn":48},{"ruleId":"142","severity":1,"message":"163","line":14,"column":19,"nodeType":"144","messageId":"145","endLine":14,"endColumn":28},{"ruleId":"164","severity":1,"message":"165","line":26,"column":22,"nodeType":"166","messageId":"167","endLine":26,"endColumn":24},{"ruleId":"142","severity":1,"message":"143","line":1,"column":32,"nodeType":"144","messageId":"145","endLine":1,"endColumn":41},{"ruleId":"142","severity":1,"message":"168","line":11,"column":7,"nodeType":"144","messageId":"145","endLine":11,"endColumn":30},{"ruleId":"142","severity":1,"message":"169","line":15,"column":16,"nodeType":"144","messageId":"145","endLine":15,"endColumn":26},{"ruleId":"142","severity":1,"message":"170","line":1,"column":53,"nodeType":"144","messageId":"145","endLine":1,"endColumn":61},{"ruleId":"142","severity":1,"message":"171","line":4,"column":18,"nodeType":"144","messageId":"145","endLine":4,"endColumn":38},{"ruleId":"142","severity":1,"message":"172","line":22,"column":8,"nodeType":"144","messageId":"145","endLine":22,"endColumn":17},{"ruleId":"164","severity":1,"message":"165","line":68,"column":19,"nodeType":"166","messageId":"167","endLine":68,"endColumn":21},{"ruleId":"164","severity":1,"message":"173","line":73,"column":46,"nodeType":"166","messageId":"167","endLine":73,"endColumn":48},{"ruleId":"156","severity":1,"message":"174","line":77,"column":6,"nodeType":"158","endLine":77,"endColumn":21,"suggestions":"175"},{"ruleId":"164","severity":1,"message":"173","line":80,"column":27,"nodeType":"166","messageId":"167","endLine":80,"endColumn":29},{"ruleId":"164","severity":1,"message":"173","line":114,"column":43,"nodeType":"166","messageId":"167","endLine":114,"endColumn":45},{"ruleId":"164","severity":1,"message":"165","line":130,"column":41,"nodeType":"166","messageId":"167","endLine":130,"endColumn":43},{"ruleId":"164","severity":1,"message":"165","line":131,"column":32,"nodeType":"166","messageId":"167","endLine":131,"endColumn":34},{"ruleId":"164","severity":1,"message":"165","line":178,"column":46,"nodeType":"166","messageId":"167","endLine":178,"endColumn":48},{"ruleId":"142","severity":1,"message":"176","line":1,"column":8,"nodeType":"144","messageId":"145","endLine":1,"endColumn":13},{"ruleId":"142","severity":1,"message":"177","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":19},{"ruleId":"142","severity":1,"message":"171","line":3,"column":23,"nodeType":"144","messageId":"145","endLine":3,"endColumn":43},{"ruleId":"142","severity":1,"message":"178","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":16},{"ruleId":"142","severity":1,"message":"179","line":10,"column":10,"nodeType":"144","messageId":"145","endLine":10,"endColumn":31},{"ruleId":"142","severity":1,"message":"180","line":21,"column":9,"nodeType":"144","messageId":"145","endLine":21,"endColumn":19},{"ruleId":"142","severity":1,"message":"170","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":25},{"ruleId":"142","severity":1,"message":"181","line":9,"column":11,"nodeType":"144","messageId":"145","endLine":9,"endColumn":19},{"ruleId":"142","severity":1,"message":"182","line":9,"column":21,"nodeType":"144","messageId":"145","endLine":9,"endColumn":33},{"ruleId":"183","severity":1,"message":"184","line":14,"column":9,"nodeType":"185","endLine":19,"endColumn":11},{"ruleId":"142","severity":1,"message":"186","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":30},{"ruleId":"142","severity":1,"message":"143","line":1,"column":32,"nodeType":"144","messageId":"145","endLine":1,"endColumn":41},{"ruleId":"142","severity":1,"message":"187","line":3,"column":10,"nodeType":"144","messageId":"145","endLine":3,"endColumn":14},{"ruleId":"142","severity":1,"message":"188","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":16},{"ruleId":"142","severity":1,"message":"147","line":4,"column":18,"nodeType":"144","messageId":"145","endLine":4,"endColumn":21},{"ruleId":"142","severity":1,"message":"186","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":30},{"ruleId":"142","severity":1,"message":"143","line":1,"column":32,"nodeType":"144","messageId":"145","endLine":1,"endColumn":41},{"ruleId":"142","severity":1,"message":"187","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":14},{"ruleId":"142","severity":1,"message":"147","line":3,"column":18,"nodeType":"144","messageId":"145","endLine":3,"endColumn":21},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Candidate' is defined but never used.","'Job' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"191","text":"192"},{"range":"193","text":"192"},{"range":"194","text":"192"},{"range":"195","text":"192"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'apiService'. Either include it or remove the dependency array.","ArrayExpression",["196"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'setClient' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'myStyles' is assigned a value but never used.","'apiService' is assigned a value but never used.","'useState' is defined but never used.","'RawDraftContentState' is defined but never used.","'BorderBox' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'apiService', 'id', and 'state'. Either include them or remove the dependency array.",["197"],"'React' is defined but never used.","'propTypes' is defined but never used.","'Client' is defined but never used.","'OutReachEditorActions' is defined but never used.","'fullScreen' is assigned a value but never used.","'children' is assigned a value but never used.","'image_source' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'CSSProperties' is defined but never used.","'Link' is defined but never used.","'ApiApi' is defined but never used.","no-global-assign","no-unsafe-negation",[0,13],"",[0,13],[0,13],[0,13],{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [apiService]",{"range":"202","text":"203"},"Update the dependencies array to be: [apiService, id, state, state.isDirty]",{"range":"204","text":"205"},[519,521],"[apiService]",[2369,2384],"[apiService, id, state, state.isDirty]"]